syntax = "proto3";

package axon;

option go_package = "github.com/Advik-B/Axon/pkg/axon";

// NodeType defines the behavior of a node.
enum NodeType {
    NODE_UNKNOWN = 0;
    START = 1;          // Entry point for an execution flow.
    CONSTANT = 2;       // Provides a static value.
    FUNCTION = 3;       // Calls a built-in or standard library function.
    OPERATOR = 4;       // Performs a binary operation (e.g., +, -, *).
    CONDITIONAL = 5;    // An IF statement, directs execution flow.
    LOOP = 6;           // A FOR loop, directs execution flow.
}

// DataType for input/output ports.
enum DataType {
    TYPE_UNKNOWN = 0;
    INTEGER = 1;
    FLOAT = 2;
    BOOLEAN = 3;
    STRING = 4;
    // Special types
    ANY = 5;            // Can connect to any other type (used for fmt.Println, etc.)
    ERROR = 6;          // Represents a Go error type.
    BYTE_ARRAY = 7;     // Represents []byte.
}

// Port represents a connection point for data on a node.
message Port {
    string name = 1;        // The name of the port (e.g., "a", "b", "result").
    DataType type = 2;      // The data type this port accepts or produces.
}

// A Node is the core building block of an Axon graph.
message Node {
    string id = 1;                   // Unique node ID within the graph.
    NodeType type = 2;              // The behavior of this node.
    string label = 3;               // Human-readable name used for variable naming.
    repeated Port inputs = 4;       // Data input ports.
    repeated Port outputs = 5;      // Data output ports.

    // Node-specific configuration.
    // For CONSTANT: "value" -> "123", "\"hello\"", "true"
    // For OPERATOR: "op" -> "+", "-", "=="
    map<string, string> config = 6;

    // For FUNCTION nodes, this specifies the Go function to call.
    // Example: "fmt.Println", "os.ReadFile", "strings.ToUpper"
    string impl_reference = 7;
}

// DataEdge represents a data dependency between two nodes.
// It connects an output port of one node to an input port of another.
message DataEdge {
    string from_node_id = 1;
    string from_port = 2;
    string to_node_id = 3;
    string to_port = 4;
}

// ExecEdge represents an execution dependency between two nodes.
// It dictates the order of operations.
message ExecEdge {
    string from_node_id = 1;
    string to_node_id = 2;
}

// A Graph is a complete Axon visual program.
message Graph {
    string id = 1;
    string name = 2;

    repeated Node nodes = 3;
    repeated DataEdge data_edges = 4;
    repeated ExecEdge exec_edges = 5;
}