// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: pkg/axon/axon.proto

package axon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Node types represent kinds of blocks in the visual language.
type NodeType int32

const (
	NodeType_NODE_UNKNOWN NodeType = 0
	NodeType_START        NodeType = 1
	NodeType_END          NodeType = 2
	NodeType_CONSTANT     NodeType = 3
	NodeType_VARIABLE     NodeType = 4
	NodeType_FUNCTION     NodeType = 5
	NodeType_OPERATOR     NodeType = 6
	NodeType_CONDITIONAL  NodeType = 7
	NodeType_LOOP         NodeType = 8
	NodeType_CUSTOM       NodeType = 9
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "NODE_UNKNOWN",
		1: "START",
		2: "END",
		3: "CONSTANT",
		4: "VARIABLE",
		5: "FUNCTION",
		6: "OPERATOR",
		7: "CONDITIONAL",
		8: "LOOP",
		9: "CUSTOM",
	}
	NodeType_value = map[string]int32{
		"NODE_UNKNOWN": 0,
		"START":        1,
		"END":          2,
		"CONSTANT":     3,
		"VARIABLE":     4,
		"FUNCTION":     5,
		"OPERATOR":     6,
		"CONDITIONAL":  7,
		"LOOP":         8,
		"CUSTOM":       9,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_axon_axon_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_pkg_axon_axon_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_axon_axon_proto_rawDescGZIP(), []int{0}
}

// Data types for input/output ports
type DataType int32

const (
	DataType_TYPE_UNKNOWN DataType = 0
	DataType_INTEGER      DataType = 1
	DataType_FLOAT        DataType = 2
	DataType_BOOLEAN      DataType = 3
	DataType_RUNE         DataType = 4
	DataType_STRING       DataType = 5
	DataType_ARRAY        DataType = 6
	DataType_STRUCT       DataType = 7
	DataType_MAP          DataType = 8
	DataType_VOID         DataType = 9
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "INTEGER",
		2: "FLOAT",
		3: "BOOLEAN",
		4: "RUNE",
		5: "STRING",
		6: "ARRAY",
		7: "STRUCT",
		8: "MAP",
		9: "VOID",
	}
	DataType_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"INTEGER":      1,
		"FLOAT":        2,
		"BOOLEAN":      3,
		"RUNE":         4,
		"STRING":       5,
		"ARRAY":        6,
		"STRUCT":       7,
		"MAP":          8,
		"VOID":         9,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_axon_axon_proto_enumTypes[1].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_pkg_axon_axon_proto_enumTypes[1]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_axon_axon_proto_rawDescGZIP(), []int{1}
}

// Represents an input/output port
type Port struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          DataType               `protobuf:"varint,2,opt,name=type,proto3,enum=axon.DataType" json:"type,omitempty"`
	IsOptional    bool                   `protobuf:"varint,3,opt,name=is_optional,json=isOptional,proto3" json:"is_optional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Port) Reset() {
	*x = Port{}
	mi := &file_pkg_axon_axon_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_axon_axon_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_pkg_axon_axon_proto_rawDescGZIP(), []int{0}
}

func (x *Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Port) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_TYPE_UNKNOWN
}

func (x *Port) GetIsOptional() bool {
	if x != nil {
		return x.IsOptional
	}
	return false
}

// Core building block of Axon â€” one visual node
type Node struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Id      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                         // Unique node ID
	Type    NodeType               `protobuf:"varint,2,opt,name=type,proto3,enum=axon.NodeType" json:"type,omitempty"` // What kind of node it is
	Label   string                 `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`                   // Human-readable name (used for variable/function names)
	Inputs  []*Port                `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`                 // Named input ports
	Outputs []*Port                `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`               // Named output ports
	// Configuration values for static parameters (e.g., constant = 42, loop limit = 10)
	Config        map[string]string `protobuf:"bytes,6,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Description   string            `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`                          // Optional help text
	ImplReference string            `protobuf:"bytes,8,opt,name=impl_reference,json=implReference,proto3" json:"impl_reference,omitempty"` // For CUSTOM nodes (e.g., user-defined functions)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_pkg_axon_axon_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_axon_axon_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_pkg_axon_axon_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_NODE_UNKNOWN
}

func (x *Node) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Node) GetInputs() []*Port {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Node) GetOutputs() []*Port {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Node) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetImplReference() string {
	if x != nil {
		return x.ImplReference
	}
	return ""
}

// A connection from one node's output to another node's input (data dependency)
type DataEdge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromNodeId    string                 `protobuf:"bytes,1,opt,name=from_node_id,json=fromNodeId,proto3" json:"from_node_id,omitempty"`
	FromPort      string                 `protobuf:"bytes,2,opt,name=from_port,json=fromPort,proto3" json:"from_port,omitempty"`
	ToNodeId      string                 `protobuf:"bytes,3,opt,name=to_node_id,json=toNodeId,proto3" json:"to_node_id,omitempty"`
	ToPort        string                 `protobuf:"bytes,4,opt,name=to_port,json=toPort,proto3" json:"to_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataEdge) Reset() {
	*x = DataEdge{}
	mi := &file_pkg_axon_axon_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataEdge) ProtoMessage() {}

func (x *DataEdge) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_axon_axon_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataEdge.ProtoReflect.Descriptor instead.
func (*DataEdge) Descriptor() ([]byte, []int) {
	return file_pkg_axon_axon_proto_rawDescGZIP(), []int{2}
}

func (x *DataEdge) GetFromNodeId() string {
	if x != nil {
		return x.FromNodeId
	}
	return ""
}

func (x *DataEdge) GetFromPort() string {
	if x != nil {
		return x.FromPort
	}
	return ""
}

func (x *DataEdge) GetToNodeId() string {
	if x != nil {
		return x.ToNodeId
	}
	return ""
}

func (x *DataEdge) GetToPort() string {
	if x != nil {
		return x.ToPort
	}
	return ""
}

// A connection indicating the order of execution (e.g., from one statement to the next)
type ExecEdge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromNodeId    string                 `protobuf:"bytes,1,opt,name=from_node_id,json=fromNodeId,proto3" json:"from_node_id,omitempty"`
	ToNodeId      string                 `protobuf:"bytes,2,opt,name=to_node_id,json=toNodeId,proto3" json:"to_node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecEdge) Reset() {
	*x = ExecEdge{}
	mi := &file_pkg_axon_axon_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecEdge) ProtoMessage() {}

func (x *ExecEdge) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_axon_axon_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecEdge.ProtoReflect.Descriptor instead.
func (*ExecEdge) Descriptor() ([]byte, []int) {
	return file_pkg_axon_axon_proto_rawDescGZIP(), []int{3}
}

func (x *ExecEdge) GetFromNodeId() string {
	if x != nil {
		return x.FromNodeId
	}
	return ""
}

func (x *ExecEdge) GetToNodeId() string {
	if x != nil {
		return x.ToNodeId
	}
	return ""
}

// A complete Axon visual program
type Graph struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Nodes         []*Node                `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	DataEdges     []*DataEdge            `protobuf:"bytes,4,rep,name=data_edges,json=dataEdges,proto3" json:"data_edges,omitempty"`
	ExecEdges     []*ExecEdge            `protobuf:"bytes,5,rep,name=exec_edges,json=execEdges,proto3" json:"exec_edges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Graph) Reset() {
	*x = Graph{}
	mi := &file_pkg_axon_axon_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_axon_axon_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_pkg_axon_axon_proto_rawDescGZIP(), []int{4}
}

func (x *Graph) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Graph) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Graph) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Graph) GetDataEdges() []*DataEdge {
	if x != nil {
		return x.DataEdges
	}
	return nil
}

func (x *Graph) GetExecEdges() []*ExecEdge {
	if x != nil {
		return x.ExecEdges
	}
	return nil
}

var File_pkg_axon_axon_proto protoreflect.FileDescriptor

const file_pkg_axon_axon_proto_rawDesc = "" +
	"\n" +
	"\x13pkg/axon/axon.proto\x12\x04axon\"_\n" +
	"\x04Port\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\"\n" +
	"\x04type\x18\x02 \x01(\x0e2\x0e.axon.DataTypeR\x04type\x12\x1f\n" +
	"\vis_optional\x18\x03 \x01(\bR\n" +
	"isOptional\"\xce\x02\n" +
	"\x04Node\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\"\n" +
	"\x04type\x18\x02 \x01(\x0e2\x0e.axon.NodeTypeR\x04type\x12\x14\n" +
	"\x05label\x18\x03 \x01(\tR\x05label\x12\"\n" +
	"\x06inputs\x18\x04 \x03(\v2\n" +
	".axon.PortR\x06inputs\x12$\n" +
	"\aoutputs\x18\x05 \x03(\v2\n" +
	".axon.PortR\aoutputs\x12.\n" +
	"\x06config\x18\x06 \x03(\v2\x16.axon.Node.ConfigEntryR\x06config\x12 \n" +
	"\vdescription\x18\a \x01(\tR\vdescription\x12%\n" +
	"\x0eimpl_reference\x18\b \x01(\tR\rimplReference\x1a9\n" +
	"\vConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x80\x01\n" +
	"\bDataEdge\x12 \n" +
	"\ffrom_node_id\x18\x01 \x01(\tR\n" +
	"fromNodeId\x12\x1b\n" +
	"\tfrom_port\x18\x02 \x01(\tR\bfromPort\x12\x1c\n" +
	"\n" +
	"to_node_id\x18\x03 \x01(\tR\btoNodeId\x12\x17\n" +
	"\ato_port\x18\x04 \x01(\tR\x06toPort\"J\n" +
	"\bExecEdge\x12 \n" +
	"\ffrom_node_id\x18\x01 \x01(\tR\n" +
	"fromNodeId\x12\x1c\n" +
	"\n" +
	"to_node_id\x18\x02 \x01(\tR\btoNodeId\"\xab\x01\n" +
	"\x05Graph\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\x05nodes\x18\x03 \x03(\v2\n" +
	".axon.NodeR\x05nodes\x12-\n" +
	"\n" +
	"data_edges\x18\x04 \x03(\v2\x0e.axon.DataEdgeR\tdataEdges\x12-\n" +
	"\n" +
	"exec_edges\x18\x05 \x03(\v2\x0e.axon.ExecEdgeR\texecEdges*\x8f\x01\n" +
	"\bNodeType\x12\x10\n" +
	"\fNODE_UNKNOWN\x10\x00\x12\t\n" +
	"\x05START\x10\x01\x12\a\n" +
	"\x03END\x10\x02\x12\f\n" +
	"\bCONSTANT\x10\x03\x12\f\n" +
	"\bVARIABLE\x10\x04\x12\f\n" +
	"\bFUNCTION\x10\x05\x12\f\n" +
	"\bOPERATOR\x10\x06\x12\x0f\n" +
	"\vCONDITIONAL\x10\a\x12\b\n" +
	"\x04LOOP\x10\b\x12\n" +
	"\n" +
	"\x06CUSTOM\x10\t*\x81\x01\n" +
	"\bDataType\x12\x10\n" +
	"\fTYPE_UNKNOWN\x10\x00\x12\v\n" +
	"\aINTEGER\x10\x01\x12\t\n" +
	"\x05FLOAT\x10\x02\x12\v\n" +
	"\aBOOLEAN\x10\x03\x12\b\n" +
	"\x04RUNE\x10\x04\x12\n" +
	"\n" +
	"\x06STRING\x10\x05\x12\t\n" +
	"\x05ARRAY\x10\x06\x12\n" +
	"\n" +
	"\x06STRUCT\x10\a\x12\a\n" +
	"\x03MAP\x10\b\x12\b\n" +
	"\x04VOID\x10\tB\n" +
	"Z\bpkg/axonb\x06proto3"

var (
	file_pkg_axon_axon_proto_rawDescOnce sync.Once
	file_pkg_axon_axon_proto_rawDescData []byte
)

func file_pkg_axon_axon_proto_rawDescGZIP() []byte {
	file_pkg_axon_axon_proto_rawDescOnce.Do(func() {
		file_pkg_axon_axon_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_axon_axon_proto_rawDesc), len(file_pkg_axon_axon_proto_rawDesc)))
	})
	return file_pkg_axon_axon_proto_rawDescData
}

var file_pkg_axon_axon_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_axon_axon_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pkg_axon_axon_proto_goTypes = []any{
	(NodeType)(0),    // 0: axon.NodeType
	(DataType)(0),    // 1: axon.DataType
	(*Port)(nil),     // 2: axon.Port
	(*Node)(nil),     // 3: axon.Node
	(*DataEdge)(nil), // 4: axon.DataEdge
	(*ExecEdge)(nil), // 5: axon.ExecEdge
	(*Graph)(nil),    // 6: axon.Graph
	nil,              // 7: axon.Node.ConfigEntry
}
var file_pkg_axon_axon_proto_depIdxs = []int32{
	1, // 0: axon.Port.type:type_name -> axon.DataType
	0, // 1: axon.Node.type:type_name -> axon.NodeType
	2, // 2: axon.Node.inputs:type_name -> axon.Port
	2, // 3: axon.Node.outputs:type_name -> axon.Port
	7, // 4: axon.Node.config:type_name -> axon.Node.ConfigEntry
	3, // 5: axon.Graph.nodes:type_name -> axon.Node
	4, // 6: axon.Graph.data_edges:type_name -> axon.DataEdge
	5, // 7: axon.Graph.exec_edges:type_name -> axon.ExecEdge
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_pkg_axon_axon_proto_init() }
func file_pkg_axon_axon_proto_init() {
	if File_pkg_axon_axon_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_axon_axon_proto_rawDesc), len(file_pkg_axon_axon_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_axon_axon_proto_goTypes,
		DependencyIndexes: file_pkg_axon_axon_proto_depIdxs,
		EnumInfos:         file_pkg_axon_axon_proto_enumTypes,
		MessageInfos:      file_pkg_axon_axon_proto_msgTypes,
	}.Build()
	File_pkg_axon_axon_proto = out.File
	file_pkg_axon_axon_proto_goTypes = nil
	file_pkg_axon_axon_proto_depIdxs = nil
}
